name: Merge Queue Drainer

# This workflow automates PR validation and merging into the default branch, triggered manually
# by an assigned SPOC using GitHub Environments.
#
# IMPORTANT: This workflow requires a CI_TRIGGER_TOKEN secret to trigger CI workflows.
# The CI_TRIGGER_TOKEN must be a Personal Access Token (PAT) or GitHub App token
# with 'pull_requests: write' permissions. This token is used to comment "ok to test"
# on PRs, which triggers the CI.
# The default GITHUB_TOKEN cannot trigger other workflows via comments due to GitHub's security restrictions.

on:
  workflow_dispatch:
    inputs:
      pr_numbers:
        description: 'Comma-separated list of PR numbers to merge into the default branch'
        required: true
      release_pr:
        description: 'Optional PR number for merging release into the default branch'
        required: false
      required_approvals:
        description: 'Number of required approvals (leave empty to auto-detect from branch protection)'
        required: false

jobs:

  approval-gate:
    name: Await Manual Approval (SPOC)
    runs-on: ubuntu-latest
    environment:
      name: merge_queue
    outputs:
      approved_by: ${{ steps.set.outputs.actor }}
    steps:
      - name: Log Merge Request Details
        run: |
          echo "=== MERGE QUEUE REQUEST DETAILS ==="
          echo "Requested by: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Default branch: ${{ github.event.repository.default_branch }}"
          echo ""
          echo "üìã PRs to merge into ${{ github.event.repository.default_branch }}:"
          echo "${{ github.event.inputs.pr_numbers }}"
          echo ""
          if [ -n "${{ github.event.inputs.release_pr }}" ]; then
            echo "üöÄ Release PR to merge into ${{ github.event.repository.default_branch }}:"
            echo "PR #${{ github.event.inputs.release_pr }}"
            echo ""
          fi
          if [ -n "${{ github.event.inputs.required_approvals }}" ]; then
            echo "‚úÖ Required approvals override: ${{ github.event.inputs.required_approvals }}"
          else
            echo "‚úÖ Required approvals: Auto-detect from branch protection"
          fi
          echo ""
          echo "‚ö†Ô∏è  PLEASE REVIEW THE ABOVE DETAILS BEFORE APPROVING"
          echo "==================================="

      - name: Update Environment Description
        run: |
          # Build concise description for environment (respecting character limits)
          RELEASE_INFO=""
          if [ -n "${{ github.event.inputs.release_pr }}" ]; then
            RELEASE_INFO=" | Release: ${{ github.event.inputs.release_pr }}"
          fi

          APPROVAL_INFO=""
          if [ -n "${{ github.event.inputs.required_approvals }}" ]; then
            APPROVAL_INFO=" | Approvals: ${{ github.event.inputs.required_approvals }}"
          fi

          DESCRIPTION="üîÑ PRs: ${{ github.event.inputs.pr_numbers }}${RELEASE_INFO} | By: ${{ github.actor }}${APPROVAL_INFO}"

          echo "Updating environment description: $DESCRIPTION"

          gh api --method PATCH \
            /repos/${{ github.repository }}/environments/merge_queue \
            --field description="$DESCRIPTION"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Confirm Approver Identity
        id: set
        run: echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT

  merge-release:
    name: Merge Release to Master
    runs-on: ubuntu-latest
    needs: [approval-gate]
    env:
      GH_TOKEN: ${{ secrets.CI_TRIGGER_TOKEN }}
    if: ${{ github.event.inputs.release_pr != '' }}
    outputs:
      release_success: ${{ steps.check.outputs.success }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Merge release PR
        id: merge
        continue-on-error: true
        run: |
          echo "Merging release PR #${{ github.event.inputs.release_pr }} into ${{ github.event.repository.default_branch }}..."
          gh pr merge ${{ github.event.inputs.release_pr }} --merge --admin

      - name: Check merge result
        id: check
        run: |
          if [[ "${{ steps.merge.outcome }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail job if merge unsuccessful
        if: ${{ steps.check.outputs.success == 'false' }}
        run: |
          echo "Release PR merge failed - failing this job"
          false

  validate-prs:
    name: Validate PRs
    needs: [merge-release]
    if: always() && (github.event.inputs.release_pr == '' || needs.merge-release.outputs.release_success == 'true')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    env:
      GH_TOKEN: ${{ secrets.CI_TRIGGER_TOKEN }}
    outputs:
      mergeable_prs: ${{ steps.set.outputs.mergeable }}
      unmergeable_prs: ${{ steps.set.outputs.unmergeable }}
      required_approvals: ${{ steps.set.outputs.required_approvals }}
      has_mergeable_prs: ${{ steps.set.outputs.has_mergeable }}
      has_unmergeable_prs: ${{ steps.set.outputs.has_unmergeable }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Validate PRs
        id: set
        env:
          PR_NUMBERS: ${{ github.event.inputs.pr_numbers }}
          REQUIRED_APPROVALS: ${{ github.event.inputs.required_approvals }}
          REPOSITORY: ${{ github.repository }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          RELEASE_PR: ${{ github.event.inputs.release_pr }}
        run: |
          python3 .github/scripts/validate_prs.py

      - name: Debug Output
        run: |
          echo "=== DEBUG: Validate PRs Job Output ==="
          echo "Mergeable PRs:      ${{ steps.set.outputs.mergeable }}"
          echo "Unmergeable PRs:    ${{ steps.set.outputs.unmergeable }}"
          echo "Required approvals: ${{ steps.set.outputs.required_approvals }}"
          echo "Has mergeable PRs:  ${{ steps.set.outputs.has_mergeable }}"  

  merge-approved:
    name: Merge Validated PRs Sequentially
    needs: [validate-prs]
    runs-on: ubuntu-latest
    if: always() && needs.validate-prs.outputs.has_mergeable_prs == 'true'
    permissions:
      contents: write
      pull-requests: write
      issues: write
    env:
      GH_TOKEN: ${{ secrets.CI_TRIGGER_TOKEN }}
    outputs:
      merged_prs: ${{ steps.merge.outputs.merged }}
      failed_update_prs: ${{ steps.merge.outputs.failed_update }}
      failed_ci_prs: ${{ steps.merge.outputs.failed_ci }}
      timeout_prs: ${{ steps.merge.outputs.timeout }}
      startup_timeout_prs: ${{ steps.merge.outputs.startup_timeout }}
      failed_merge_prs: ${{ steps.merge.outputs.failed_merge }}
    steps:
      - name: Log Job Start
        run: echo "Starting merge job..."

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Merge PRs Sequentially
        id: merge
        if: ${{ needs.validate-prs.outputs.has_mergeable_prs == 'true' }}
        env:
          MERGEABLE_PRS: ${{ needs.validate-prs.outputs.mergeable_prs }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          MAX_WAIT_SECONDS: "2700"  # 45 minutes
          CHECK_INTERVAL: "30"      # 30 seconds
          MAX_STARTUP_WAIT: "300"   # 5 minutes (configurable for different CI environments)
          MERGE_MESSAGE: "Merged via Merge Queue"  # Configurable merge commit message
        run: |
          python3 -u .github/scripts/merge_prs_sequentially.py

      - name: Comment on unmergeable PRs
        if: ${{ needs.validate-prs.outputs.has_unmergeable_prs == 'true' || needs.merge-approved.outputs.failed_merge_prs != '' }}
        env:
          GH_TOKEN: ${{ github.token }}
          INITIAL_UNMERGEABLE_PRS: ${{ needs.validate-prs.outputs.unmergeable_prs }}
          FAILED_MERGE_PRS: ${{ needs.merge-approved.outputs.failed_merge_prs }}
          REQUIRED_APPROVALS: ${{ needs.validate-prs.outputs.required_approvals }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          python3 .github/scripts/process_unmergeable_prs.py

  notify-release-failure:
    name: Notify failure of merging release to ${{ github.event.repository.default_branch }}
    if: ${{ needs.merge-release.outputs.release_success == 'false' && github.event.inputs.release_pr != '' }}
    runs-on: ubuntu-latest
    needs: [merge-release]
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Notify SPOC on release merge failure
        run: |
          gh pr comment ${{ github.event.inputs.release_pr }} \
            --body "‚ùå The release PR #${{ github.event.inputs.release_pr }} failed to merge into \`${{ github.event.repository.default_branch }}\`. The remaining workflow steps were skipped."

  notify-summary:
    name: Send Summary Notification
    needs: [validate-prs, merge-approved]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Send Summary
        run: |
          python3 .github/scripts/generate_summary.py
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          REQUIRED_APPROVALS: ${{ needs.validate-prs.outputs.required_approvals }}
          TOTAL_REQUESTED_RAW: ${{ github.event.inputs.pr_numbers }}
          MERGED: ${{ needs.merge-approved.outputs.merged_prs }}
          UNMERGEABLE: ${{ needs.validate-prs.outputs.unmergeable_prs }}
          FAILED_UPDATE: ${{ needs.merge-approved.outputs.failed_update_prs }}
          FAILED_CI: ${{ needs.merge-approved.outputs.failed_ci_prs }}
          TIMEOUT: ${{ needs.merge-approved.outputs.timeout_prs }}
          STARTUP_TIMEOUT: ${{ needs.merge-approved.outputs.startup_timeout_prs }}
          FAILED_MERGE: ${{ needs.merge-approved.outputs.failed_merge_prs }}

      - name: Reset Environment Description
        if: always()
        run: |
          echo "Resetting environment description to default state..."
          gh api --method PATCH \
            /repos/${{ github.repository }}/environments/merge_queue \
            --field description="Environment for merge queue approvals"
        env:
          GH_TOKEN: ${{ github.token }}
