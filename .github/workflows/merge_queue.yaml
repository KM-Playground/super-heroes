name: Merge Queue Drainer

# This workflow automates PR validation and merging into the default branch, triggered by
# 'begin-merge' comments on issues with the 'merge-queue' label.
#
# WORKFLOW PROCESS:
# 1. User creates an issue using the merge queue template
# 2. User comments 'begin-merge' to trigger the workflow
# 3. System extracts PR information from the issue body
# 4. merge-approvals team is tagged for approval with 60-minute timeout
# 5. Upon approval, PRs are validated and merged sequentially
# 6. Results are posted back to the original issue, which is then closed
#
# IMPORTANT: This workflow requires a CI_TRIGGER_TOKEN secret to trigger CI workflows.
# The CI_TRIGGER_TOKEN must be a Personal Access Token (PAT) or GitHub App token
# with 'pull_requests: write' permissions. This token is used to comment "ok to test"
# on PRs, which triggers the CI.
# The default GITHUB_TOKEN cannot trigger other workflows via comments due to GitHub's security restrictions.

on:
  issue_comment:
    types: [created]

jobs:

  get-team-info:
    name: Get Team Information
    if: |
      github.event.issue.state == 'open' &&
      contains(github.event.comment.body, 'begin-merge') &&
      contains(github.event.issue.labels.*.name, 'merge-queue')
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      team_members: ${{ steps.get-members.outputs.team_members }}
      team_tag: ${{ steps.get-members.outputs.team_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get team members
        id: get-members
        env:
          GH_TOKEN: ${{ secrets.CI_TRIGGER_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Getting team member information..."

          # Extract org from repository
          ORG=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          TEAM="merge-approvals"

          echo "Organization: $ORG"
          echo "Team: $TEAM"

          # Try to get team members using the custom token
          if MEMBERS=$(gh api "orgs/$ORG/teams/$TEAM/members" --jq '.[].login' 2>/dev/null); then
            # Filter out any terminal control characters and create member tags
            CLEAN_MEMBERS=$(echo "$MEMBERS" | grep -v '^]' | grep -v '^\[' | grep -v '^$' | tr '\n' ' ')
            if [ -n "$CLEAN_MEMBERS" ]; then
              MEMBER_TAGS=""
              for member in $CLEAN_MEMBERS; do
                MEMBER_TAGS="$MEMBER_TAGS @$member"
              done
              MEMBER_TAGS=$(echo "$MEMBER_TAGS" | sed 's/^ *//')

              echo "✅ Found team members: $CLEAN_MEMBERS"
              echo "team_members=$CLEAN_MEMBERS" >> $GITHUB_OUTPUT
              echo "team_tag=$MEMBER_TAGS" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Team exists but no members found"
              echo "team_members=" >> $GITHUB_OUTPUT
              echo "team_tag=@$ORG/$TEAM" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ Could not access team members, using team tag"
            echo "team_members=" >> $GITHUB_OUTPUT
            echo "team_tag=@$ORG/$TEAM" >> $GITHUB_OUTPUT
          fi

  check-trigger:
    name: Check Trigger and Initialize
    needs: [get-team-info]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Initialize merge queue with duplicate prevention
        id: initialize
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Initializing merge queue with duplicate prevention..."
          python3 .github/scripts/merge_queue/initialize_merge_queue.py

      - name: Tag merge-approvals team for approval
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          COMMENTER: ${{ github.event.comment.user.login }}
          PR_NUMBERS: ${{ steps.initialize.outputs.pr_numbers }}
          RELEASE_PR: ${{ steps.initialize.outputs.release_pr }}
          TEAM_MEMBERS: ${{ needs.get-team-info.outputs.team_members }}
          TEAM_TAG: ${{ needs.get-team-info.outputs.team_tag }}
        run: |
          echo "Starting team approval request..."
          echo "Team members: $TEAM_MEMBERS"
          echo "Team tag: $TEAM_TAG"
          python3 .github/scripts/merge_queue/tag_team_for_approval.py

      - name: Wait for approval with reminders
        id: wait-approval
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          TRIGGER_COMMENT_TIME: ${{ github.event.comment.created_at }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          TEAM_MEMBERS: ${{ needs.get-team-info.outputs.team_members }}
          TEAM_TAG: ${{ needs.get-team-info.outputs.team_tag }}
        run: |
          echo "Starting approval wait process..."
          echo "Team members for validation: $TEAM_MEMBERS"
          python3 .github/scripts/merge_queue/wait_for_approval.py

    outputs:
      pr_numbers: ${{ steps.initialize.outputs.pr_numbers }}
      release_pr: ${{ steps.initialize.outputs.release_pr }}
      required_approvals: ${{ steps.initialize.outputs.required_approvals }}
      approved: ${{ steps.wait-approval.outputs.approved }}


  merge-release:
    name: Merge Release to Master
    runs-on: ubuntu-latest
    needs: [check-trigger]
    env:
      GH_TOKEN: ${{ secrets.CI_TRIGGER_TOKEN }}
      RELEASE_PR: ${{ needs.check-trigger.outputs.release_pr }}
    if: ${{ needs.check-trigger.outputs.release_pr != '' }}
    outputs:
      release_success: ${{ steps.check.outputs.success }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Merge release PR
        id: merge
        continue-on-error: true
        env:
          REPOSITORY: ${{ github.repository }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          echo "Merging release PR #$RELEASE_PR into $DEFAULT_BRANCH..."
          python3 .github/scripts/merge_queue/merge_release_pr.py

      - name: Check merge result
        id: check
        run: |
          if [[ "${{ steps.merge.outcome }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail job if merge unsuccessful
        if: ${{ steps.check.outputs.success == 'false' }}
        run: |
          echo "Release PR merge failed - failing this job"
          false

  validate-prs:
    name: Validate PRs
    needs: [check-trigger, merge-release]
    if: always() && !cancelled() && (needs.check-trigger.outputs.release_pr == '' || needs.merge-release.outputs.release_success == 'true')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    env:
      GH_TOKEN: ${{ secrets.CI_TRIGGER_TOKEN }}
    outputs:
      mergeable_prs: ${{ steps.set.outputs.mergeable }}
      unmergeable_prs: ${{ steps.set.outputs.unmergeable }}
      required_approvals: ${{ steps.set.outputs.required_approvals }}
      has_mergeable_prs: ${{ steps.set.outputs.has_mergeable }}
      has_unmergeable_prs: ${{ steps.set.outputs.has_unmergeable }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Validate PRs
        id: set
        env:
          PR_NUMBERS: ${{ needs.check-trigger.outputs.pr_numbers }}
          REQUIRED_APPROVALS: ${{ needs.check-trigger.outputs.required_approvals }}
          REPOSITORY: ${{ github.repository }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          RELEASE_PR: ${{ needs.check-trigger.outputs.release_pr }}
        run: |
          python3 .github/scripts/merge_queue/validate_prs.py

      - name: Debug Output
        run: |
          echo "=== DEBUG: Validate PRs Job Output ==="
          echo "Mergeable PRs:      ${{ steps.set.outputs.mergeable }}"
          echo "Unmergeable PRs:    ${{ steps.set.outputs.unmergeable }}"
          echo "Required approvals: ${{ steps.set.outputs.required_approvals }}"
          echo "Has mergeable PRs:  ${{ steps.set.outputs.has_mergeable }}"  

  merge-approved:
    name: Merge Validated PRs Sequentially
    needs: [validate-prs]
    runs-on: ubuntu-latest
    if: always() && !cancelled() && needs.validate-prs.outputs.has_mergeable_prs == 'true'
    permissions:
      contents: write
      pull-requests: write
      issues: write
    env:
      GH_TOKEN: ${{ secrets.CI_TRIGGER_TOKEN }}
    outputs:
      merged_prs: ${{ steps.merge.outputs.merged }}
      failed_update_prs: ${{ steps.merge.outputs.failed_update }}
      failed_ci_prs: ${{ steps.merge.outputs.failed_ci }}
      timeout_prs: ${{ steps.merge.outputs.timeout }}
      startup_timeout_prs: ${{ steps.merge.outputs.startup_timeout }}
      failed_merge_prs: ${{ steps.merge.outputs.failed_merge }}
    steps:
      - name: Log Job Start
        run: echo "Starting merge job..."

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Merge PRs Sequentially
        id: merge
        if: ${{ needs.validate-prs.outputs.has_mergeable_prs == 'true' }}
        env:
          MERGEABLE_PRS: ${{ needs.validate-prs.outputs.mergeable_prs }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          REPOSITORY: ${{ github.repository }}
          MAX_WAIT_SECONDS: "2700"  # 45 minutes
          CHECK_INTERVAL: "30"      # 30 seconds
          MAX_STARTUP_WAIT: "300"   # 5 minutes (configurable for different CI environments)
        run: |
          python3 -u .github/scripts/merge_queue/merge_prs_sequentially.py

      - name: Comment on unmergeable PRs
        if: ${{ needs.validate-prs.outputs.has_unmergeable_prs == 'true' || needs.merge-approved.outputs.failed_merge_prs != '' }}
        env:
          GH_TOKEN: ${{ github.token }}
          INITIAL_UNMERGEABLE_PRS: ${{ needs.validate-prs.outputs.unmergeable_prs }}
          FAILED_MERGE_PRS: ${{ needs.merge-approved.outputs.failed_merge_prs }}
          REQUIRED_APPROVALS: ${{ needs.validate-prs.outputs.required_approvals }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          python3 .github/scripts/merge_queue/process_unmergeable_prs.py

  notify-release-failure:
    name: Notify failure of merging release to ${{ github.event.repository.default_branch }}
    if: ${{ needs.merge-release.outputs.release_success == 'false' && needs.check-trigger.outputs.release_pr != '' }}
    runs-on: ubuntu-latest
    needs: [merge-release, check-trigger]
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Notify SPOC on release merge failure
        env:
          RELEASE_PR: ${{ needs.check-trigger.outputs.release_pr }}
        run: |
          gh pr comment $RELEASE_PR \
            --body "❌ The release PR #$RELEASE_PR failed to merge into \`${{ github.event.repository.default_branch }}\`. The remaining workflow steps were skipped."

  notify-summary:
    name: Send Summary Notification
    needs: [check-trigger, validate-prs, merge-approved]
    runs-on: ubuntu-latest
    if: always() && !cancelled() && needs.check-trigger.outputs.approved == 'true'
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Send Summary
        run: |
          python3 .github/scripts/merge_queue/generate_summary.py
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          REQUIRED_APPROVALS: ${{ needs.validate-prs.outputs.required_approvals }}
          TOTAL_REQUESTED_RAW: ${{ needs.check-trigger.outputs.pr_numbers }}
          MERGED: ${{ needs.merge-approved.outputs.merged_prs }}
          UNMERGEABLE: ${{ needs.validate-prs.outputs.unmergeable_prs }}
          FAILED_UPDATE: ${{ needs.merge-approved.outputs.failed_update_prs }}
          FAILED_CI: ${{ needs.merge-approved.outputs.failed_ci_prs }}
          TIMEOUT: ${{ needs.merge-approved.outputs.timeout_prs }}
          STARTUP_TIMEOUT: ${{ needs.merge-approved.outputs.startup_timeout_prs }}
          FAILED_MERGE: ${{ needs.merge-approved.outputs.failed_merge_prs }}
          SUBMITTER: ${{ github.event.comment.user.login }}
          ORIGINAL_ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Close tracking issue
        if: always() && !cancelled()
        run: |
          # Determine completion status based on job results
          if [[ "${{ needs.check-trigger.result }}" != "success" ]]; then
            echo "COMPLETION_STATUS=failed" >> $GITHUB_ENV
            echo "SUMMARY_MESSAGE=Merge queue failed during initial checks." >> $GITHUB_ENV
          elif [[ "${{ needs.merge-approved.result }}" == "success" ]]; then
            echo "COMPLETION_STATUS=completed" >> $GITHUB_ENV
            echo "SUMMARY_MESSAGE=Merge queue completed successfully." >> $GITHUB_ENV
          elif [[ "${{ needs.merge-approved.result }}" == "cancelled" ]]; then
            echo "COMPLETION_STATUS=rejected" >> $GITHUB_ENV
            echo "SUMMARY_MESSAGE=Merge queue was rejected or cancelled." >> $GITHUB_ENV
          else
            echo "COMPLETION_STATUS=failed" >> $GITHUB_ENV
            echo "SUMMARY_MESSAGE=Merge queue failed during execution." >> $GITHUB_ENV
          fi

          python3 .github/scripts/merge_queue/close_tracking_issue.py
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}


